package laplacian.metamodel
import com.github.jknack.handlebars.Context
import laplacian.util.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import java.io.File
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors
/**
 * A test utility class to assert the content of files which are generated by the templates.
 */
class MetamodelTemplateAssertion() {
    lateinit var model: MetamodelModel
    lateinit var context: Context
    /**
     * Read the model object from the given yaml files.
     */
    fun withModel(files: List<File>): MetamodelTemplateAssertion {
        model = MetamodelModelLoader().load(files)
        context = TemplateWrapper.createContext(model)
        return this
    }
    /**
     * Read the model object from the given yaml files.
     */
    fun withModel(path: String, glob: String = "{*,**/*}.yml"): MetamodelTemplateAssertion {
        val m = FileSystems.getDefault().getPathMatcher("glob:$path/$glob")
        model = MetamodelModelLoader().load(
            Files.walk(Paths.get(path))
                 .filter { m.matches(it) }
                 .map{ it.toFile() }
                 .collect(Collectors.toList())
        )
        context = TemplateWrapper.createContext(model)
        return this
    }
    /**
     * Read the model object from the given yaml expression.
     */
    fun withModelText(text: String): MetamodelTemplateAssertion {
        val temp = File.createTempFile(MetamodelTemplateAssertion::javaClass.name, ".yml")
        temp.deleteOnExit()
        temp.writeText(text)
        model = MetamodelModelLoader().load(listOf(temp))
        context = TemplateWrapper.createContext(model)
        return this
    }
    lateinit var template: File
    /**
     * Set the test target template file.
     */
    fun withTemplate(templatePath: String): MetamodelTemplateAssertion {
        template = File(templatePath)
        return this
    }
    /**
     * Assert that the contents of the given file and generated one are same.
     */
    fun assertSameContent(toBeSourceCodePath: String, handleModel:(model: MetamodelModel) -> Map<String, Any?> = { emptyMap() }) {
        val actual = template.readText().handlebars().apply(Context.newContext(context, handleModel(model)))
        val expect = File(toBeSourceCodePath).readText()
        assertEquals(expect.stripDocComments(), actual.stripDocComments())
    }
    /**
     * Assert that the content of the generated file contains the given string.
     */
    fun assertContains(content: String, handleModel:(model: MetamodelModel) -> Map<String, Any?> = { emptyMap() }) {
        val actual = template.readText().handlebars().apply(Context.newContext(context, handleModel(model))).stripDocComments()
        val expect = content.stripDocComments()
        val result = actual.replace("""(\n|^)\s*""".toRegex(), "\n").contains(expect.replace("""(\n|^)\s*""".toRegex(), "\n"))
        assertTrue(result, "\n---\n$expect\n---\nThe above content should be included in the following generated code:\n---\n${actual}")
    }
}