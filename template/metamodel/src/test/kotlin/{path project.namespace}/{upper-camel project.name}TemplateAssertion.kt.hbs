{{define "project_name" (upper-camel project.name)}}
{{#define "class_name"}}{{project_name}}TemplateAssertion{{/define}}

package {{project.namespace}}
import com.github.jknack.handlebars.Context
import laplacian.gradle.task.generate.ExecutionContext
import {{project.namespace}}.gradle.{{project_name}}ModelEntryResolver
{{#each entities.top_level_in_namespace as |entity|}}
import {{entity.namespace}}.model.{{entity.class_name}}List
{{/each}}
import laplacian.util.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import java.io.File
import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Paths
import java.util.stream.Collectors

/**
 * A test utility class which asserts the content of the files generated by with a template.
 */
class {{class_name}} {
    lateinit var context: ExecutionContext
    {{#each entities.top_level_in_namespace as |entity|}}
    lateinit var {{lower-camel (plural entity.name)}}: {{entity.class_name}}List
    {{/each}}

    /**
     * Reads the model objects from the given yaml files.
     */
    fun withModel(files: List<File>): {{class_name}} {
        context = ExecutionContext().apply {
            modelFiles.addAll(files)
            modelEntryResolvers.add({{project_name}}ModelEntryResolver())
        }
        context.build()
        {{#each entities.top_level_in_namespace as |entity|}}
        {{lower-camel (plural entity.name)}} = context.currentModel.get("{{plural entity.name}}") as {{entity.class_name}}List
        {{/each}}
        return this
    }

    /**
     * Reads the model objects from the given yaml files.
     */
    fun withModel(path: String, glob: String = "{*,**/*}.yml"): {{class_name}} {
        val m = FileSystems.getDefault().getPathMatcher("glob:$path/$glob")
        val files = Files.walk(Paths.get(path))
                   .filter { m.matches(it) }
                   .map{ it.toFile() }
                   .collect(Collectors.toList())
        withModel(files)
        return this
    }

    /**
     * Reads the model objects from the given yaml expression.
     */
    fun withModelText(text: String): {{class_name}} {
        val temp = File.createTempFile({{class_name}}::javaClass.name, ".yml")
        temp.deleteOnExit()
        temp.writeText(text)
        withModel(listOf(temp))
        return this
    }

    lateinit var template: File

    /**
     * Sets the test target template file.
     */
    fun withTemplate(templatePath: String): {{class_name}} {
        template = File(templatePath)
        return this
    }

    /**
     * Asserts that the given file and the generated one have the same content.
     */
    fun assertSameContent(toBeSourceCodePath: String, handleModel:{{class_name}}.() -> Map<String, Any?> = { emptyMap() }) {
        val child = handleModel.invoke(this)
        val ctx = Context.newContext(context.currentModel, child)
        val actual = template.readText().handlebars().apply(ctx)
        val expect = File(toBeSourceCodePath).readText()
        assertEquals(expect.stripDocComments(), actual.stripDocComments())
    }

    /**
     * Asserts that the given file and the generated one have the same given content.
     */
    fun assertContains(content: String, handleModel:{{class_name}}.() -> Map<String, Any?> = { emptyMap() }) {
        val child = handleModel.invoke(this)
        val ctx = Context.newContext(context.currentModel, child)
        val actual = template.readText().handlebars().apply(ctx).stripDocComments()
        val expect = content.stripDocComments()
        val result = actual.replace("""(\n|^)\s*""".toRegex(), "\n").contains(expect.replace("""(\n|^)\s*""".toRegex(), "\n"))
        assertTrue(result, "\n---\n$expect\n---\nThe above content should be included in the following generated code:\n---\n${actual}")
    }
}
